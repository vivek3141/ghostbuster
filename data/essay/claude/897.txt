A safety-critical system is one whose failure or malfunction may result in loss of life, significant property damage, or damage to the environment. Safety-critical systems, such as aircraft controls, nuclear power plant automation, and medical device software, have much more stringent requirements around reliability and robustness than typical high-availability systems. 

The level of integrity required for a safety-critical system is determined by analyzing the risks associated with potential failures and assigning a safety integrity level (SIL) based on standards such as IEC 61508. Higher SIL levels correspond to lower acceptable failure rates and higher reliability requirements. To achieve a given SIL, IEC 61508 recommends using languages and tools that minimize the possibility of design flaws and programming errors. It recommends against languages that do not have strong type checking or allow unchecked memory access. Formal languages and static analysis tools are preferred over less strict general-purpose languages.

Fault injection testing introduces simulated faults into a system to verify its ability to handle failures and remain in a safe state. Various failure modes are induced, such as shutting down a sensor or actuator, to confirm the system responds appropriately. This testing is important for safety-critical systems to validate that the system can satisfy its stated reliability and availability requirements in the presence of faults. If a system cannot maintain its key safety functions during fault injection tests, it suggests there are still latent design weaknesses that could result in hazards during operation.

Formal methods refer to mathematically-based techniques for software specification, development, and verification. They include formal specification languages, model checking, theorem proving, and refinement. Formal methods allow for precise specification of system requirements and functionality, as well as mathematical proof that a system implementation satisfies its specifications. They contribute to the reliability and dependability of safety-critical systems by enabling more rigorous analysis of system designs and source code. Formal verification has been used to validate safety properties in aircraft control systems, railway signaling systems, and nuclear reactor controllers. 

In summary, safety-critical systems have much higher integrity requirements compared to most high-availability systems. Their development follows principles including strong type checking, static analysis, fault injection testing, and formal methods to maximize reliability and dependability. Following these principles helps ensure that safety-critical systems can avoid failures that lead to loss of life or major damage.