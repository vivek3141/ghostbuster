Buying pre-built software packages to use as subsystems in a larger software development project can save time and reduce costs. However, there are also risks associated with this approach that project managers must consider and mitigate. 

The first major risk is that the package may not fully meet the needs of your project. Off-the-shelf software is designed to suit a wide range of users and use cases, so it likely includes many features that your project does not need. However, it may also be missing key features or capabilities that are important for your particular project. Carefully evaluating available packages to determine how well they meet your needs can help avoid this risk. If needed, you may be able to extend or customize the package to add missing functionality. But extensive customization also introduces risks to cost, schedule, and quality.

A second risk is that the package may not integrate well with the rest of your system. If the package was not designed with open standards and integration in mind, it can be difficult to connect it with other components. This can lead to higher costs for integration, performance issues, and an inconsistent user experience. Seeking packages that adhere to open standards and have a track record of successful integration in other systems is advisable. You should also plan for a potentially time-consuming integration process in your schedule.  

A third risk is that the package may contain unknown defects or security vulnerabilities. Because off-the-shelf software is designed to be used in a wide range of environments, the creators cannot fully test it under your specific conditions. Latent defects or vulnerabilities that do not appear in general use may emerge in your system. Carefully testing the package as part of your QA process and monitoring for newly discovered vulnerabilities can help minimize problems. But there is always some residual risk of issues arising from the package.

In summary, while using pre-built software packages as subsystems can provide benefits, there are risks around lack of fit for your needs, integration challenges, and potential defects or security issues. Conducting thorough evaluations of packages, planning for customization and integration work, building in ample testing time, and closely monitoring for new vulnerabilities are all strategies that can help mitigate these risks and allow your project to leverage the benefits of off-the-shelf software. With proper risk management, buying rather than building select subsystems can be a worthwhile approach. But project managers must go in with eyes open to the risks as well as the rewards.