A business can be described as an organization operating with the objective of making a profit from the sale of goods or services. In order to make a profit the business needs its operations to be as efficient as possible so that customer service is high, and in recent years the best way to achieve this has been with modern technology.
Today, many, if not all of businesses operate in conjunction with modern technology in order to create a competitive advantage over other businesses operating in a similar market, whether it be communicating via email to customers or advertising on the internet. Larger businesses especially have modern technology at the heart of the organization and rely on it heavily for good customer service. They may store customer records in databases, monitor stock levels in warehouses, use databases for data mining or use spreadsheets for accounts or a combination of all four. Systems providing different functionality can be networked together and controlled by software to provide crucial operations for the business, and if the whole or even part of the system fails the sale of goods or services would cease and so good designing is important.
The design stage of developing programs shapes the final product into having certain characteristics. Decisions can be made based on user requirements such as whether the program should have a modular or a data flow architecture, and it allows you to plan for evolution within the program. The design is essentially important because it can be used to estimate the amount of time needed to write a program as goals can be set to keep you on schedule with development and within in a budget. Therefore a design is highly influential in lowering the risk of taking too long or blowing the budget when developing software.
In business time is money and developing programs quickly is essential so that they can be used effectively to generate revenue, but developing programs is not a quick process. After the designing stage the code needs to be written and be extensively tested to ensure quality. Therefore there is no margin for error when writing the code otherwise the developing time could be doubled. The design acts as an overview of the solution which can be deemed unfeasible even before the coding begins in order to prevent time being wasted redesigning at a later stage in development after errors have occurred or incompatibility has been discovered. Although the design cannot foresee all problematic issues within a program it is a powerful tool that does allow the major ones to be isolated and resolved.
As detailed above we can see how the design is important for time saving purposes in the near future as redesigning can be avoided, but it can also save time for developers in the long run too which will ultimately reduce production costs for the company. Quick development means lower costs as less man hours will need to be worked and a lower opportunity cost for the business until the new, improved system is not up and running.
Time being saved in the long run can be achieved by building scope for evolution into the design for the program solution at an early date so that major redesigning will not have to occur to later on in development to accommodate it. Designing for evolution is important because the business environment is fickle and can change very rapidly as new technologies emerge or the business moves into another segment of a market. As a result of this, it is necessary to have designed programs that the company heavily relies on with the ability to be easily altered or have additional functionality added to. In these situations design is important as it allows you to plan change within the code. However, designing for evolution within programs takes careful planning and this is why the design stage of development is crucial. When functionality is altered or code is added, conflicts can occur within the code causing error messages and resulting in incorrect outputs. It can sometimes be hard to predict where conflicts may occur and usually only through testing can they be exposed, but if the original design of the program is robust then it should be able to operate normally regardless of change. Designs need to be written so that programs can be robust as it is extremely hard to write good code of this nature spontaneously. Robust programs tend to keep variables local and use a modular structure so that functionality can be easily added through new modules which can be separate from the original coding.
Having a well structured, easy to follow and logical design is imperative as it is from these that future programmers can evolve existing programs. If the programmer chosen to evolve a program is not the original creator then it is difficult for the job to be done to the best of his/her ability especially if the design is incomprehensible. Although creating a comprehensible design is essential when developing software, it can be especially hard if the program is complex and needs to operate alongside and communicate with other programs. This is because the scope of the program may not be immediately apparent as other necessary functionality may not be discovered until the programming is underway. If the program is standalone and not complex, the scope can be used to determine the structure of the program and act as a rough guide as to how detailed the design needs to be. For example, if the program being developed has complex business requirements to implement which involve communicating with other programs, then the design will have to be more detailed than that of a program which is simple and self-contained. If on the other hand the requirements documentation reveals a program rich in functionality then the design will need to be detailed enough to reflect the functionality, and of some considerable size.
Every business is primarily interested in creating large profit margins. Technology plays a large role in this as the performance of the programs and systems in place are directly proportional to the size of the profit margin. If a program is efficient the productivity is greater, which ultimately means more capital is generated. Design is important as it can build efficiency into the coding of the program via methods which are pre thought out. For example, it is more efficient to use arithmetic in a program instead of loops where possible because loops may have to run through very high values which can take much longer than a division or multiplication sum. For the same reasons as with robust code, it is very difficult to produce efficient code as you go. It is like writing an essay without a design; people tend to go off at tangents.
Efficiency is especially crucial within real time systems where information received needs to be immediately responded to without any time delay so that the time to process data is minimal. Businesses with the ability to process data in real time are desirable by consumers which leads to an increase in credibility and competitive advantage.
The majority of businesses have stakeholders; people who have an interest in the welfare of the business such as investors, shareholders, and other companies. If a new system is being developed that uses new software then the design of the system becomes extremely important as it can reveal a new architecture altogether or other changes to the current system.
The design can also be used as a presentation that can be a focus for discussion by a range of different stakeholders. For example if a business such as Amazon was changing the dispatching system at their warehouse, the delivery company who is a stakeholder of Amazon, would need to know of any changes and whether it was still financially viable to continue their service to Amazon. The design documents may also be published to the consumers so that they know the business has invested in a new system controlled by efficiently designed software in order to attract their custom by explaining in detail how it works. It shows that a business is confident in the new system and of achieving a better quality of service than any other competitors in the market.
Quality of service needs to be high to ensure customer confidence doesn't fall. For good customer service you do need an efficient system for the reasons detailed above, but you must also ensure that the interaction between the system and the customer is of a high standard. The design is important here to raise customer confidence in the business as it plans in advance how the system's functionality will be manipulated by users, and how the functionality will be represented to the user.
Now that many companies are online it is normal for the main interface for a business is through a website. Therefore the coding for the software in the system needs to be designed in such a way that a website can control the functionality. It is crucial that the website is clear, and tells you all the information you need about the services provided in a coherent and logical manner. When programming the website for use with Java or VB Script and of course HTML, the design of the overall system must be clear in your mind from the design, and the scripting languages used need to be compatible with the software for the system so the functionality can be exploited. Any incompatibility issues should be foreseen using the design documents before coding of the system software begins to ensure all functionality can be implemented and results transferred between the front end (the website) and backend (the system).
All of the reasons as to why is it important to design before you program above are valid but the most important issue to address is that of risk. Businesses do not like risk as it can ultimately lead to low revenues and reduced profits. Money is pumped into contingency plans to reduce or preferably avoid risk such as using back up power supplies if mains power fails on servers or by having hardware which outperforms the requirements of the software so it can cope with heavy traffic. It is apparent that the fundamental purpose of a design is to lower the risk of developing software by constructing the architecture and finding the best ways to write the most efficient and robust code possible, so the chance of the system failing when in operation is minute. Lowering risk is crucial for a business as the software driving their systems determines how well they perform in the market; the more efficient the system, the more reputable the business will be for good service. If design wasn't used to develop software for businesses then the systems may not be as reliable or such a good solution as they would otherwise have been. The essay analogy can be used again because without a design, the final product may not be as coherent or as well structured as it could have been.
Although the majority of people prefer to sit down and start coding and believe that writing a design is a waste of time, it is ironic because it can actually save a lot of time in the future. Many software developers learn this through experience which is considered the hard way, but at the end of the day it's usually the business' finances that suffer.