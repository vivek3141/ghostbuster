In the course of playing the video game Ratchet and Clank, the player will encounter various (often useful) objects. Thus, one of the objectives of the game is to collect as many of these objects as possible.
For any given objective (or problem) for which there exists a computable solution, there may be one or more possible solutions which will produce the desired result. This coursework aims to develop one such solution- i.e. to attempt to discover the best way to collect as many objects as possible.
The program is controlled by a while loop so the time need to execute the algorithm is ultimately dependent on the nature of the universal set U as this governs the time taken for the while loop (controlling the program) to complete. A greater number of distinct elements in U results in a longer execution time. The actual execution time is affected by the distribution of the elements within U. For example, when attempting to obtain a set containing the elements {3,1, 4, 2}, the algorithm would achieve this faster from a set such as {2,3,4,1,4,3,1,2,1,4} rather than (2,2,2,2,2,2,2,3,1,4}. On the basis of the model used in developing this algorithm, the execution time would vary due across runs due to the random distribution of the elements contained within the set U (see Assumptions).
If the number of distinct objects is given by the constant d, the ideal U set would be one where there is no repetition within the first d elements. Whatever comes after is irrelevant. Using the exercise example of d=11, taking into account 11 runs of the While loop, I estimate that at least 78 (11 x 7 steps per completed While + 1 last check of While condition to terminate) steps are required to obtain a set of 11 distinct objects. This assumes that calling a subroutine is only counted once, as a single step, ignoring their internal steps.
A common application of sets could be in programs that generate random sets of numbers for lottery tickets, bingo, etc. So for example, with the National Lottery, there may be set U = {1,2,3,4... 48,49}. The program must then generate subsets which contain 6 elements with no repetitions within the sets.